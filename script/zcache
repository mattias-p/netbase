#!/usr/bin/env perl
use strict;
use warnings;

use Const::Fast;
use DateTime;
use File::Slurp qw( read_file write_file );
use Getopt::Long qw( GetOptionsFromArray );
use Netbase qw( proto rrtype );
use Netbase::Cache;
use Netbase::IP qw( ip );
use Netbase::Name qw( name );
use Netbase::Net;
use Netbase::Question qw( question );
use Pod::Usage qw( pod2usage );

const my %ALL_SUBCOMMANDS => (
    query => \&do_query,
    dump  => \&do_dump,
    list  => \&do_list,
);

sub main {
    my @args = @_;

    my $opt_help;
    my $opt_man;

    Getopt::Long::Configure qw(
      posix_default
      permute
      bundling
      pass_through
    );
    GetOptionsFromArray(
        \@args,
        "h|help" => \$opt_help,
        "man"    => \$opt_man,
    ) or pod2usage( -verbose => 0 );

    my $cmd_name = shift @args;
    my $cmd_sub  = (
        exists $ALL_SUBCOMMANDS{$cmd_name}
        ? $ALL_SUBCOMMANDS{$cmd_name}
        : usage_err( "Unrecognized subcommand" )
    ) if defined $cmd_name;

    do_help( $cmd_name )
      if $opt_help;
    pod2usage( -verbose => 2 )
      if $opt_man;

    usage_err( "No subcommand given" )
      if !defined $cmd_sub;

    eval { $cmd_sub->( @args ) };
    die "zcache: error: $@"
      if $@;

    return;
}

sub do_query {
    my @args = @_;

    # Parse mode and config options
    my $opt_read;
    my $opt_update;
    my $opt_create;
    my $opt_force;
    my $opt_qname;
    my $opt_qtype;
    my $opt_timeout = 5;
    my $opt_retry   = 3;
    my $opt_retrans = 1;
    Getopt::Long::Configure qw( no_pass_through );
    GetOptionsFromArray(
        \@args,
        "r|read=s"   => \$opt_read,
        "u|update=s" => \$opt_update,
        "c|create=s" => \$opt_create,
        "f|force"    => \$opt_force,
        "q|qname=s"  => \$opt_qname,
        "t|qtype=s"  => \$opt_qtype,
        "timeout=f"  => \$opt_timeout,
        "retry=i"    => \$opt_retry,
        "retrans=f"  => \$opt_retrans,
    ) or usage_err( "Error in subcommand line arguments", "query" );

    usage_err( "Must not specify more than one of --create, --update, --read", "query" )
      if scalar( grep { defined $_ } $opt_create, $opt_update, $opt_read ) > 1;

    usage_err( "Value out of range for --timeout", "query" )
      if $opt_timeout < 0 || $opt_timeout > 1000;

    usage_err( "Value out of range for --retry", "query" )
      if $opt_retry < 1 || $opt_retry > 1000;

    usage_err( "Value out of range for --retrans", "query" )
      if $opt_retrans < 0 || $opt_retrans > 1000;

    # Parse request options
    my $opt_proto   = $Netbase::PROTO_UDP;
    my $opt_recurse = 0;
    my $opt_dnssec;
    my $opt_bufsize = 512;
    my $opt_edns_version;
    my $opt_edns_opt;
    Getopt::Long::Configure qw(
      prefix=+
      no_bundling
    );
    GetOptionsFromArray(
        \@args,
        'udp+'       => sub { $opt_proto = $Netbase::PROTO_UDP },
        'tcp+'       => sub { $opt_proto = $Netbase::PROTO_TCP },
        'recurse!'   => \$opt_recurse,
        'noedns+'    => sub { $opt_edns_version = undef },
        'edns=i'     => \$opt_edns_version,
        'ednsopt=s'  => \$opt_edns_opt,
        'noednsopt+' => sub { $opt_edns_opt = undef },
        'dnssec!'    => \$opt_dnssec,
        'bufsize=i'  => sub {
            $opt_bufsize = shift;
            if ( $opt_bufsize == 0 ) {
                $opt_edns_version = undef;
            }
        },
    ) or usage_err( "Error in subcommand line arguments", "query" );

    my $edns_opt_code;
    my $edns_opt_value;
    if ( defined $opt_edns_opt ) {
        my ( $code, $value ) = split /:/, $opt_edns_opt, 2;
        $code =~ /^([0-9]+)$/    #
          or usage_err( "Invalid ednsopt code given", "query" );
        $edns_opt_code = $1;

        if ( defined $value ) {
            $value =~ /^((:?[0-9a-f]{2})+)$/i    #
              or usage_err( "Invalid ednsopt value given", "query" );
            $edns_opt_value = [ map ord, split //, pack "H*", $1 ];
        }
        else {
            $edns_opt_value = "";
        }
    }

    if ( $opt_edns_version || $opt_dnssec || $edns_opt_code ) {
        $opt_edns_version //= 0;
        $opt_dnssec       //= 0;
    }

    if ( defined $opt_edns_version ) {
        usage_err( "EDNS version out of range", "query" )
          if $opt_edns_version < 0 || $opt_edns_version > 255;

        usage_err( "EDNS option code out of range", "query" )
          if defined $edns_opt_code && ( $edns_opt_code < 1 || $edns_opt_code > 65535 );
    }
    $edns_opt_code //= 0;

    # Parse qname, qtype and server
    my @opt_nss;
    for my $arg ( @args ) {
        if ( $arg =~ /^@/ ) {
            push @opt_nss, $arg;
        }
        elsif ( rrtype( $arg ) ) {
            usage_err( "Multiple qtype values given", "query" )
              if defined $opt_qtype;
            $opt_qtype = $arg;
        }
        elsif ( name( $arg ) ) {
            usage_err( "Multiple qname values given", "query" )
              if defined $opt_qname;
            $opt_qname = $arg;
        }
        else {
            usage_err( "Unrecognized argument given: $arg", "query" );
        }
    }

    my $qname = name(
       $opt_qname // usage_err( "No qname given", "query" )    #
    ) // usage_err( "Invalid qname given", "query" );

    my $qtype = name(
        $opt_qtype // usage_err( "No qtype given", "query" )    #
    ) // usage_err( "Invalid qtype given", "query" );

    my @nss = map {
        parse_ns(
            $_ // usage_err( "No server given", "query" )    #
        ) // usage_err( "Invalid name server address given", "query" )
    } @opt_nss;

    # Construct question
    my $question = question(
        $qname, $qtype,
        {
            proto             => $opt_proto,
            recursion_desired => $opt_recurse,
        }
    );
    if ( defined $opt_edns_version ) {
        $question->set_edns( $opt_edns_version, $opt_dnssec, $opt_bufsize, $edns_opt_code, $edns_opt_value );
    }

    # Check clobber
    if ( defined $opt_create && !$opt_force && -e $opt_create ) {
        die "Aborting: File already exists: $opt_create\n";
    }

    # Initialize cache
    my $cache = init_cache( $opt_read // $opt_update, defined $opt_update && $opt_force );

    # Initialize networking
    my $net;
    if ( !defined $opt_read || $opt_force ) {
        $net = Netbase::Net->new(
            timeout => $opt_timeout,
            retry   => $opt_retry,
            retrans => $opt_retrans,
        );
    }

    # Perform lookup
    my @queries;
    my $outcomes = $cache->lookup( $net, $question, @nss );
    for my $outcome_ns ( keys %{ $outcomes } ) {
        my ( $start, $duration, $msg_size, $err_kind, $message ) = @{ $outcomes->{$outcome_ns} };
        $outcome_ns = ip( $outcome_ns );
        push @queries, [ $question, $outcome_ns, $message, $err_kind, $start, $duration, $msg_size ];
    }

    show_all_attempts( $cache, @queries );

    # Save cache
    if ( defined ( my $file = $opt_create // $opt_update ) ) {
        write_file $file, { binmode => ':raw' }, $cache->to_bytes();
    }

    return;
}

sub do_list {
    my @args = @_;

    Getopt::Long::Configure qw( no_pass_through );
    GetOptionsFromArray(
        \@args,
    ) or usage_err( "Error in subcommand line arguments", "list" );

    my $arg_file = shift( @args )    #
      // usage_err( "No cache file given", "list" );

    if ( @args ) {
        usage_err( "Extra arguments given", "dump" );
    }

    my $cache = init_cache( $arg_file, 0 );

    $cache->for_each_request(
        sub {
            my ( $question, $ns ) = @_;
            print "$question \@$ns\n";
        }
    );

    return;
}

sub do_dump {
    my @args = @_;

    Getopt::Long::Configure qw( no_pass_through );
    GetOptionsFromArray(
        \@args,
    ) or usage_err( "Error in subcommand line arguments", "dump" );

    my $arg_file = shift( @args )    #
      // usage_err( "No cache file given", "dump" );

    if ( @args ) {
        usage_err( "Extra arguments given", "dump" );
    }

    my $cache = init_cache( $arg_file, 0 );

    my @queries;
    $cache->for_each_request(
        sub {
            my ( $ns, $question ) = @_;
            my $outcomes = $cache->lookup( undef, $question, $ns );
            for my $outcome_ns ( keys %{ $outcomes } ) {
                my ( $start, $duration, $msg_size, $err_kind, $message ) = @{ $outcomes->{$outcome_ns} };
                $outcome_ns = ip( $outcome_ns );
                push @queries, [ $question, $outcome_ns, $message, $err_kind, $start, $duration, $msg_size ];
            }
        }
    );

    show_all_attempts( $cache, @queries );

    return;
}

sub init_cache {
    my ( $file, $ignore_read_error ) = @_;

    if ( defined $file ) {
        my $contents = eval { read_file( $file, { binmode => ':raw' } ) };
        if ( !$@ ) {
            return Netbase::Cache->from_bytes( $contents );
        }
        if ( !$ignore_read_error ) {
            die $@;
        }
    }
    return Netbase::Cache->new();
}

sub parse_ns {
    my ( $value ) = @_;
    if ( $value =~ /^@(.*)$/ ) {
        return ip( $1 );
    }
    else {
        return;
    }
}

sub show_all_attempts {
    my ( $cache, @queries ) = @_;

    my $first = 1;
    for my $entry ( sort { $a->[4] <=> $b->[4] } @queries ) {
        my ( $question, $ns, $message, $err_kind, $start, $duration, $msg_size ) = @$entry;

        my @failures;
        $cache->for_each_retry(
            $question,
            $ns,
            sub {
                my ( $start, $duration, $err_kind ) = @_;
                push @failures, [ $question, $ns, undef, $err_kind, $start, $duration, 0 ];
            }
        );

        print "\n\n"
          if !$first;
        $first = 0;

        for my $failure ( @failures ) {
            show_outcome( @$failure );
            print "\n\n"
        }
        show_outcome( $question, $ns, $message, $err_kind, $start, $duration, $msg_size );
    }

    return;
}

sub show_outcome {
    my ( $question, $ns, $message, $err_kind, $start, $duration, $msg_size ) = @_;
    print "; <<>> zcache <<>> $question \@$ns\n";

    my $dt = DateTime->from_epoch( epoch => $start / 1_000.0 );
    if ( $message ) {
        print ";; Got answer:\n";
        print $message->to_string;
        print "\n";
        printf ";; Response size: %s bytes\n", $msg_size;
    }
    elsif ( $err_kind ) {
        printf ";; %s\n\n", $err_kind;
    }
    else {
        print ";; NOT IN CACHE\n";

        return;
    }

    printf ";; Name server: %s#53\n",          $ns;
    printf ";; Request sent: %s\n",         $dt->strftime( "%F %T.%3N" );
    printf ";; Response time: %s msec\n", $duration;

    return;
}

sub do_help {
    my ( $cmd_name ) = @_;

    if ( defined $cmd_name ) {
        pod2usage( -verbose => 99, -sections => "SUBCOMMAND: zcache $cmd_name" );
    }
    else {
        pod2usage( -verbose => 99, -sections => "NAME|SYNOPSIS|OPTIONS|SUBCOMMANDS|DESCRIPTION" );
    }

    return;
}

sub usage_err {
    my ( $message, $cmd_name ) = @_;

    if ( defined $cmd_name ) {
        pod2usage( -msg => "zcache: $message", -verbose => 99, -sections => "SUBCOMMAND: zcache $cmd_name/USAGE" );
    }
    else {
        pod2usage( "zcache: $message" );
    }

    return;
}

if ( __PACKAGE__ eq 'main' ) {
    main( @ARGV );
}

=head1 NAME

zcache - DNS cache lookup utility

=head1 SYNOPSIS

zcache --help

zcache --help SUBCOMMAND

zcache --man

zcache SUBCOMMAND [subcommand arguments and options]

=head1 OPTIONS

=over 4

=item B<--help>

Print a brief help message and exit.
If no subcommand is given the help message concerns B<zcache> itself.
If a subcommand is given the help message concerns that subcommand.

=item B<--man>

Print the full manual page and exit.

=back

=head1 SUBCOMMANDS

=over 4

=item B<query>

Make a single query.

=item B<list>

List all requests in the cache.

=item B<dump>

Dump all requests in the cache, along with their outcomes.

=back

=head1 SUBCOMMAND: zcache query

Perform a single lookup.

=head2 USAGE

zcache query [-f] [-r FILE|-u FILE|-w FILE] [-q] NAME [-t] TYPE SERVER... [query and config options]

=head2 MODE OPTIONS

=over 4

=item B<-r FILE>, B<--read FILE>

Make the request to the given cache file.
If the request is not cached, an error message is printed.
This subcommand aborts if the file does not exists.

If B<--force> is specified this mode is modified so that the request is sent
over the network if the file does not exist.

Must not be combined with B<--update> or B<--create>.

=item B<-u FILE>, B<--update FILE>

Make the request to the given cache file.
If the request isn't in the cache then update it.
This subcommand aborts if the file does not exists.

If B<--force> is specified this mode is modified so that the file is created if
it does not exist.

Must not be combined with B<--read> or B<--create>.

=item B<-c FILE>, B<--create FILE>

Save the cache to a new file.
This subcommand is aborted if the already file exists.

If B<--force> is specified this mode is modified so that existing files are
truncated and overwritten.

Must not be combined B<--read> or B<--update>.

=item B<-f>, B<--force>

If this option is given together with another mode option it modifies that
option.
See the other mode options for details.

If it is given without any other mode option it is simply ignored.

=back

=head2 QUERY ARGUMENTS

=over 4

=item B<SERVER>

The syntax for a SERVER is an at-sign (@) immediately followed by an IP address.

=item B<TYPE>

Short for B<--qtype TYPE>.

=item B<NAME>

Short for B<--qname NAME>.

B<Note>: When using this syntax NAME must not be a valid TYPE or it will be interpreted
as a TYPE.

=item B<-q NAME>, B<--qname NAME>

The qname to ask for in the request.

=item B<-t TYPE>, B<--qtype TYPE>

The qtype to ask for in the request.

=back

=head2 QUERY OPTIONS

=over 4

=item B<+udp>, B<+tcp>

Select transport protocol.
Default is C<+udp>.

=item B<+recurse>, B<+norecurse>

Enable/disable the RD flag in the request.
Default is C<+norecurse>.

=item B<+edns VERSION>, B<+noedns>

Enable/disable EDNS and set its version in the request.
Default is C<+noedns> if all other EDNS options are disabled.
Default is C<+edns 0> if at least one EDNS option is enabled.

=item B<+dnssec>, B<+nodnssec>

Enable/disable the DO flag in the EDNS header of the request.
Default is C<+noednssec>.

=item B<+ednsopt CODE>, B<+noednsopt>

Enable/disable the adding of the given option code to the EDNS header of the
request.
Default is C<+noednsopt>.

=back

=head2 CONFIG OPTIONS

These options are only considered when sending requests over the network.
Not when making the cache lookup.

=over 4

=item B<--timeout DURATION>

Seconds to wait for a response without giving up.
A floating point number with millisecond precision.
Default is 5.

=item B<--retry COUNT>

Number of times to try a query before giving up.
Default is 3.

=item B<--retrans DURATION>

Seconds of extra delay before retrying a request.
A floating point number with millisecond precision.
Default is 1.

=back

=head1 SUBCOMMAND: zcache list

List all requests in the cache.

=head2 USAGE

zcache list FILE

=head2 ARGUMENTS

=over 4

=item B<FILE>

Initialize the cache from the given FILE.

=back

=head1 SUBCOMMAND: zcache dump

Dump all requests in the cache, along with their outcomes.

=head2 USAGE

zcache dump FILE

=head2 ARGUMENTS

=over 4

=item B<FILE>

Initialize the cache from the given FILE.

=back

=head1 DESCRIPTION

Reads and writes DNS cache files and makes single DNS queries.

=cut
